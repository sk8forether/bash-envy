#!/bin/bash

## Set up suffix for adjoint run: "_ad"
#  or leave as "" for forward run
suff="_ad"
dir_suff=".dec.240mo"

use_perturbation="false"
use_masks="true"
use_extra_ctrls="false"
use_clim_relax="true"
use_ecco_mixing_params="false"
use_ecco_binary_inputs="true"
use_ecco_insitu_obs="false"
use_ecco_pickups="true"

## Set up directories
root_dir=$HOME/MITgcm_c65x+
ver_dir=$root_dir/verification/global_oce_llc90

exp_dir=$PWD
build_dir=$exp_dir/build$suff
code_dir=$exp_dir/code$suff

run_dir=$exp_dir'/run'$suff$dir_suff
input_dir=$exp_dir/input$suff$dir_suff

ctrl_dir=$WORK/ecco-data/control-vectors-zero
masks_dir=$input_dir/masks
perturb_dir=$input_dir/$perturbation
clim_relax_dir=$input_dir/relax
ecco_binary_input_dir=${ver_dir}/input_fields
ecco_insitu_dir=$data_dir/inputs_baseline2/input_insitu
ecco_pickup_dir=${ver_dir}/input_fields

submit_script=$exp_dir/submit_oscillatory$suff
data_dir=$WORK/ecco-data

forcing_dir=/nobackupp8/pheimbac/data/ecmwf-interim-bulk

# ----- 1. Set up directories and submission script
## Make work directory in SCRATCH
if [ ! -d $run_dir ] ; then
	echo "Making "$run_dir" ..."
        mkdir $run_dir
	mkdir $run_dir/diags
	mkdir $run_dir/tapes
	mkdir $run_dir/profiles
fi       

####
## Link ALL of the files
####
cd $run_dir
echo "Grabbing necessary files ..."

cp $submit_script .

#--- 2. linking binary ---------
if [ "use_ecco_input_binaries" == "true" ] ; then 
  ln -s ${ecco_binary_input_dir}/*.bin .
  
  ln -s ${ecco_binary_input_dir}${ver_dir}/input_fields/tile*.mitgrid .
  #  ###
  ln -s ${ecco_binary_input_dir}/smooth2Dscales001${extsmooth} ./smooth2Dscales001
  ln -s ${ecco_binary_input_dir}/smooth3DscalesH001${extsmooth} ./smooth3DscalesH001
  ln -s ${ecco_binary_input_dir}/smooth3DscalesZ001 ./
  ln -s ${ecco_binary_input_dir}/smooth2Dnorm001${extsmooth}.data ./smooth2Dnorm001.data
  ln -s ${ecco_binary_input_dir}/smooth3Dnorm001${extsmooth}.data ./smooth3Dnorm001.data
  ln -s ${ecco_binary_input_dir}/smooth2Dnorm001.meta ./
  ln -s ${ecco_binary_input_dir}/smooth3Dnorm001.meta ./
fi
#=================================================================================

#--- 2.1. ECCO control vectors -----
if [ "$use_ecco_mixing_params" == "true" ] ; then
  ln -s ${ecco_binary_input_dir}/wt_ones.data .
  ln -s ${ecco_binary_input_dir}/xx_* .
fi
#=================================================================================

#--- 2.2 Insitu observations ------
if [ "$use_ecco_insitu_obs" == "true" ] ; then
  ln -s ${ecco_insitu_dir}/*.nc .
fi
#=================================================================================

#--- 3. linking forcing dir ------
ln -s $forcing_dir ./
#=================================================================================

#--- 4. NAMELISTS ---------
ln -s ${input_dir}/* ./
#=================================================================================

#--- 5. executable --------
ln -sf ${build_dir}/mitgcmuv${suff} ./
#=================================================================================

#--- 6. pickups -----------
#NOTE: for pickup: copy instead of link to prevent accidental over-write
if [ "$use_ecco_pickups" == "true" ] ; then
  cp -f ${ecco_pickup_dir}/pickup* ./
  cp -f ${ver_dir}/input_fields/pickup* ./
fi
#=================================================================================

#--- 7. Copy additional control vectors for this experiment, if dir exists
if [ "$use_extra_ctrls" == "true" ] ; then
  if [ -d $ctrl_dir ] ; then 
    ln -sv $ctrl_dir/* .
  else
    echo "** No additional control vectors ... "
  fi
else 
  echo "** Extra controls not added ... "
fi
#=================================================================================

#--- 8. Look for perturbation directory
if [ "$use_perturbation" == "true" ] ; then
  if [ -d $perturb_dir ] ; then
    ln -sfv $perturb_dir/* .
  else
    echo "** Could not find perturbation directory: $perturb_dir ... "
  fi
else 
  echo "** Perturbations not added ... " 
fi
#=================================================================================

#--- 9. Copy masks for this particular setup.
#  dir should be inside inputs
if [ "$use_masks" == "true" ] ; then
  if [ -d $masks_dir ] ; then
    ln -sv $masks_dir/* .
  else
    echo "** Could not find mask dir: $masks_dir ... "
  fi
else
  echo "** Masks not used ... "
fi
#=================================================================================

#--- 10. link to climatological relaxation
#  dir should be inside inputs
if [ "$use_clim_relax" == "true" ] ; then
  if [ -d $clim_relax_dir ] ; then
    ln -sv $clim_relax_dir/* .
  else
    echo "** Could not find clim_relax dir: $clim_relax_dir ... "
  fi
else
  echo "** Climatological relaxation not used ... "
fi
#=================================================================================

echo "Ready to execute ..."

echo ""
echo "*** Pro tips: "
echo "      - Check data.pkg: useAUTODIFF = .true.? usePROFILES = .false.? "
echo ""
echo "      - Check data: "
echo "           nTimeSteps correct? tapes directory uncommented? adjDump = false?"
echo ""
echo "      - Check data.ctrl ... mult = 0 for non-optimize run? "
echo "           have the necessary xx_<parameter> files?"
echo ""
echo "      - Check data.diagnostics: have the filenames set with diags/ prefix? "
echo ""
echo "      - Check data.exf: directory set for correct forcing files? period correct?"
echo "" 
echo "      - Check data.ecco: ... just make sure it looks good"
echo ""
echo "      - Check to make sure any masks are set properly ... "
echo ""
echo "      - Check submit file for .."
echo "           Correct queue? "
echo "           forward run: <exec> mitgcmuv "
echo "           adjoint: <exec> mitgcmuv_ad "
echo "           walltime correct? " 
echo ""
echo "Assuming this is done, ready for launch ... "
echo ""
echo ""
