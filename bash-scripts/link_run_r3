#!/bin/bash

## Set up suffix for adjoint run: "_ad"
#  or leave as "" for forward run
proj="test-adj-diags"
suff="_ad"
build_suff=""
dir_suff=""
perturbation=""
extra_ctrls=""
use_masks="true"
use_diff_pickup=""
pickup_iter=1
xxext="_it59"
xxiter="0000000059"

## Set up directories
root_dir=$HOME/MITgcm_r3

exp_dir=$PWD
build_dir=$exp_dir/build$suff$build_suff
build_dir_ad=$HOME/adj-build/${proj}/build_ad$build_suff
code_dir=$exp_dir/code$suff$build_suff

run_dir=$exp_dir/run$suff$dir_suff
input_dir=$exp_dir/input$suff$dir_suff

ctrl_dir=/scratch/tsmith/data/ctrls-zero-1992-to-2018

masks_dir=$input_dir/masks
perturb_dir=$input_dir/$perturbation
extra_pickup_dir=/scratch/tsmith/enso2/run.eig_ref

submit_script=$exp_dir/submit_${proj}$suff
data_dir=$ph_data
input_data_dir=$SCRATCH/data/input_v4_rls2.025l.iter59

forcing_dir=/scratch/tsmith/data/forcing-release3

# ----- 1. Set up directories and submission script
## Make work directory in SCRATCH
if [ ! -d $run_dir ] ; then
	echo "Making "$run_dir" ..."
        mkdir $run_dir
	mkdir $run_dir/diags
	mkdir $run_dir/tapes
	mkdir $run_dir/profiles
fi       

####
## Link ALL of the files
####
cd $run_dir
echo "Grabbing necessary files ..."

cp $submit_script .

#--- 2. linking binary ---------
ln -s ${input_data_dir}/input_binaries/*.bin .
ln -s ${input_data_dir}/GRID/tile*.mitgrid .
ln -s ${input_data_dir}/input* .
ln -s ${input_data_dir}/input_insitu/*.nc .
ln -s ${input_data_dir}/input_weight/* .
#ln -s ${input_data_dir}/input/my_input .
###
ln -s ${input_data_dir}/input_smooth/smooth2Dscales001${extsmooth} ./smooth2Dscales001
ln -s ${input_data_dir}/input_smooth/smooth3DscalesH001${extsmooth} ./smooth3DscalesH001
ln -s ${input_data_dir}/input_smooth/smooth3DscalesZ001 ./
ln -s ${input_data_dir}/input_smooth/smooth2Dnorm001${extsmooth}.data ./smooth2Dnorm001.data
ln -s ${input_data_dir}/input_smooth/smooth3Dnorm001${extsmooth}.data ./smooth3Dnorm001.data
ln -s ${input_data_dir}/input_smooth/smooth2Dnorm001.meta ./
ln -s ${input_data_dir}/input_smooth/smooth3Dnorm001.meta ./
#=================================================================================

#--- 3. linking forcing dir ------
ln -sf $forcing_dir ./
#=================================================================================

#--- 3. linking xx_ fields ------
ln -s ${input_data_dir}/ADXXfiles${xxext}/xx*${xxiter}* ./
rm xx*effective*
##=================================================================================

#--- 4. NAMELISTS ---------
ln -sf ${input_dir}/* ./
#=================================================================================

#--- 5. executable --------
if [ "$suff" == "_ad" ] ; then 
	ln -sf ${build_dir_ad}/mitgcmuv${suff} ./
elif [ "$suff" == "" ] ; then
	ln -sf ${build_dir}/mitgcmuv${suff} ./
else
	echo "ERROR: No executable found, unrecognized suffix ... " 
fi
#=================================================================================

#--- 6. pickups -----------
#NOTE: for pickup: copy instead of link to prevent accidental over-write
cp -f ${input_data_dir}/input_pickup/pickup* ./
#=================================================================================

#--- 7. Copy additional control vectors for this experiment, if dir exists
if [ ! "$extra_ctrls" == "" ] ; then
  if [ -d $ctrl_dir ] ; then 
    ln -sfv $ctrl_dir/* .
    ln -sfv $HOME/MITgcm_c65q/verification/global_oce_llc90/input_fields/wt_ones* .
  else
    echo "** No additional control vectors ... "
  fi
else 
  echo "** Extra controls not added ... "
fi
#=================================================================================

#--- 8. Look for perturbation directory
if [ ! "$perturbation" == "" ] ; then
  if [ -d $perturb_dir ] ; then
    ln -sfv $perturb_dir/* .
  else
    echo "** Could not find perturbation directory: $perturb_dir ... "
  fi
else 
  echo "** Perturbations not added ... " 
fi
#=================================================================================

#--- 9. Copy masks for this particular setup.
#  dir should be inside inputs
if [ ! "$use_masks" == "" ] ; then
  if [ -d $masks_dir ] ; then
    ln -sv $masks_dir/* .
  else
    echo "** No masks found in $masks_dir ... "
  fi
else
  echo "** Masks not used ... "
fi
#=================================================================================

#--- 10. Grab pickups from a different folder.
#  dir should be inside inputs
if [ ! "$use_diff_pickup" == "" ] ; then
  if [ -d $extra_pickup_dir ] ; then
    cp -v $extra_pickup_dir/pickup*$pickup_iter* .
  else
    echo "** No pickups found in $extra_pickup_dir ... "
  fi
else
  echo "** Extra pickups not used ... "
fi
#=================================================================================
#--- 9. make a list of all linked files ------
\rm -f command_ln_input
ls -l input*/input_* > command_ln_input

\rm -f command_ln_binary
ls -l *.nc > command_ln_binary
#=================================================================================


echo "Ready to execute ..."

echo ""
echo "*** Pro tips: "
echo "      - Check data.pkg: useAUTODIFF = .true.? usePROFILES = .false.? "
echo ""
echo "      - Check data: "
echo "           nTimeSteps correct? tapes directory uncommented? adjDump = false?"
echo ""
echo "      - Check data.ctrl ... mult = 0 for non-optimize run? "
echo "           have the necessary xx_<parameter> files?"
echo ""
echo "      - Check data.diagnostics: have the filenames set with diags/ prefix? "
echo ""
echo "      - Check data.exf: directory set for correct forcing files? period correct?"
echo "" 
echo "      - Check data.ecco: ... just make sure it looks good"
echo ""
echo "      - Check to make sure any masks are set properly ... "
echo ""
echo "      - Check submit file for .."
echo "           Correct queue? "
echo "           forward run: <exec> mitgcmuv "
echo "           adjoint: <exec> mitgcmuv_ad "
echo "           walltime correct? " 
echo "		 DIFFERENT FOR SCRATCH: change workrun directory in submit file "
echo ""
echo "Assuming this is done, ready for launch ... "
echo ""
echo ""
