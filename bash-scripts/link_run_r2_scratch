#!/bin/bash

## Set up suffix for adjoint run: "_ad"
#  or leave as "" for forward run
proj="jra55"
suff=""
dir_suff=".gpcp"
perturbation=""
use_masks=""
use_extra_ctrls=""
use_clim_relax=""
use_diff_pickups="true"

## Set up directories
root_dir=$HOME/MITgcm_c65x+
ver_dir=$root_dir/verification/global_oce_llc90

exp_dir=$PWD
build_dir=$exp_dir/build$suff
code_dir=$exp_dir/code$suff

proj_dir=$SCRATCH/${proj}
run_dir=$proj_dir/run$suff$dir_suff
wk_dir=$exp_dir/run$suff$dir_suff
input_dir=$exp_dir/input$suff$dir_suff

pickup_dir=$exp_dir/pickups
masks_dir=$input_dir/masks
perturb_dir=$input_dir/$perturbation
clim_relax_dir=$input_dir/clim

submit_script=$exp_dir/submit_${proj}_scratch$suff
data_dir=$WORK/../ecco-data
ctrl_dir=$data_dir/control-vectors-zero
input_data_dir=$data_dir/inputs_baseline2/input_insitu

## For JRA 55 forcing
forcing_dir=/scratch/03901/atnguyen/jra55

# ----- 1. Set up directories and submission script
## Make work directory in SCRATCH
if [ ! -d $proj_dir ] ; then
	echo "Making "$proj_dir" ..."
	mkdir $proj_dir
fi

if [ ! -d $run_dir ] ; then
	echo "Making "$run_dir" ..."
        mkdir $run_dir
	mkdir $run_dir/diags
	mkdir $run_dir/tapes
	mkdir $run_dir/profiles
fi       

if [ ! -d $wk_dir ] ; then
	echo "Making " $wk_dir" ..."
	mkdir $wk_dir
fi

####
## Link ALL of the files
####
cd $run_dir
echo "Grabbing necessary files ..."

cp $submit_script .
## Important for scratch version
sed -i "s/workrun=/workrun=\$WORK\/${proj}\/run${suff}${dir_suff}/g" ${run_dir}/submit_${proj}_scratch${suff}

#--- 2. linking binary ---------
ln -s ${ver_dir}/input_fields/*.bin .
ln -s ${ver_dir}/input_fields/wt_ones.data .
ln -s ${ver_dir}/input_fields/tile*.mitgrid .
#  ###
ln -s ${ver_dir}/input_fields/smooth2Dscales001${extsmooth} ./smooth2Dscales001
ln -s ${ver_dir}/input_fields/smooth3DscalesH001${extsmooth} ./smooth3DscalesH001
ln -s ${ver_dir}/input_fields/smooth3DscalesZ001 ./
ln -s ${ver_dir}/input_fields/smooth2Dnorm001${extsmooth}.data ./smooth2Dnorm001.data
ln -s ${ver_dir}/input_fields/smooth3Dnorm001${extsmooth}.data ./smooth3Dnorm001.data
ln -s ${ver_dir}/input_fields/smooth2Dnorm001.meta ./
ln -s ${ver_dir}/input_fields/smooth3Dnorm001.meta ./
#=================================================================================

#--- 2.1. ECCO control vectors -----
ln -sv ${ver_dir}/input_fields/xx_* .
rm xx_*.gz
#=================================================================================

#--- 2.2 Insitu observations ------
ln -s ${input_data_dir}/*.nc .
#=================================================================================

#--- 3. linking forcing dir ------
ln -sv $forcing_dir ./
#=================================================================================

#--- 4. NAMELISTS ---------
ln -s ${input_dir}/* ./
#=================================================================================

#--- 5. executable --------
ln -sfv ${build_dir}/mitgcmuv${suff} ./
#=================================================================================

#--- 6. pickups -----------
#NOTE: for pickup: copy instead of link to prevent accidental over-write
if [ "$use_diff_pickups" == "true" ] ; then 
  if [ -d $pickup_dir ] ; then 
    cp -fv $pickup_dir/pickup* ./
  else
    echo "** Couldn't find pickup dir ${pickup_dir} ... "
  fi
else
  echo "** Using regular ECCOv4r2 pickups ... "
  cp -fv ${ver_dir}/input_fields/pickup* ./
fi
#=================================================================================

#--- 7. Copy additional control vectors for this experiment, if dir exists
if [ "$use_extra_ctrls" == "true" ] ; then
  if [ -d $ctrl_dir ] ; then 
    ln -sv $ctrl_dir/* .
  else
    echo "** No additional control vectors ... "
  fi
else 
  echo "** Extra controls not added ... "
fi
#=================================================================================

#--- 8. Look for perturbation directory
if [ ! "$perturbation" == "" ] ; then
  if [ -d $perturb_dir ] ; then
    ln -sfv $perturb_dir/* .
  else
    echo "** Could not find perturbation directory: $perturb_dir ... "
  fi
else 
  echo "** Perturbations not added ... " 
fi
#=================================================================================

#--- 9. Copy masks for this particular setup.
#  dir should be inside inputs
if [ "$use_masks" == "true" ] ; then
  if [ -d $masks_dir ] ; then
    ln -sv $masks_dir/* .
  else
    echo "** Could not find mask dir: $masks_dir ... "
  fi
else
  echo "** Masks not used ... "
fi
#=================================================================================

#--- 10. link to climatological relaxation
#  dir should be inside inputs
if [ "$use_clim_relax" == "true" ] ; then
  if [ -d $clim_relax_dir ] ; then
    ln -sv $clim_relax_dir/* .
  else
    echo "** Could not find clim_relax dir: $clim_relax_dir ... "
  fi
else
  echo "** Climatological relaxation not used ... "
fi
#=================================================================================

echo "Ready to execute ..."

echo ""
echo "*** Pro tips: "
echo "      - Check data.pkg: useAUTODIFF = .true.? usePROFILES = .false.? "
echo ""
echo "      - Check data: "
echo "           nTimeSteps correct? tapes directory uncommented? adjDump = false?"
echo ""
echo "      - Check data.ctrl ... mult = 0 for non-optimize run? "
echo "           have the necessary xx_<parameter> files?"
echo ""
echo "      - Check data.diagnostics: have the filenames set with diags/ prefix? "
echo ""
echo "      - Check data.exf: directory set for correct forcing files? period correct?"
echo "" 
echo "      - Check data.ecco: ... just make sure it looks good"
echo ""
echo "      - Check to make sure any masks are set properly ... "
echo ""
echo "      - Check submit file for .."
echo "           Correct queue? "
echo "           forward run: <exec> mitgcmuv "
echo "           adjoint: <exec> mitgcmuv_ad "
echo "           walltime correct? " 
echo ""
echo "Assuming this is done, ready for launch ... "
echo ""
echo ""
