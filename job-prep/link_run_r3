#!/bin/bash

## Set up suffix for adjoint run: "_ad"
#  or leave as "" for forward run
proj="adj-viz"
suff="_ad"
build_suff=""
dir_suff=""
use_perturbation=""
use_extra_ctrls="true"
use_masks="true"
use_diff_pickup=""
use_ecco_mixing_params="true"
use_ecco_initial_conditions="true"
use_ecco_binary_inputs="true"
use_ecco_insitu_obs="false"
use_ecco_pickups="true"
pickup_iter=1
xxext="_it59"

## Set up directories
root_dir=$HOME/MITgcm_c66i+

exp_dir=$PWD
build_dir=$exp_dir/build$suff$build_suff
build_dir_ad=$HOME/adj-build/${proj}/build_ad$build_suff
code_dir=$exp_dir/code$suff$build_suff

run_dir=$exp_dir/run$suff$dir_suff
input_dir=$exp_dir/input$suff$dir_suff

data_dir=/scratch/tsmith/data
input_data_dir=$data_dir/input_v4_rls2.025l.iter59

ecco_binary_input_dir=$input_data_dir/input_binaries
ecco_insitu_dir=$input_data_dir/input_insitu
ecco_pickup_dir=$input_data_dir/input_pickup

ctrl_dir=$data_dir/ctrls-zero-1992-to-2018
masks_dir=$input_dir/masks
perturb_dir=$input_dir/$perturbation
extra_pickup_dir=/scratch/tsmith/enso2/run.eig_ref
clim_relax_dir=$input_dir/relax

submit_script=$exp_dir/submit_${proj}$suff

forcing_dir=/scratch/tsmith/data/forcing-release3

# ----- 1. Set up directories and submission script
## Make work directory in SCRATCH
if [ ! -d $run_dir ] ; then
	echo "Making "$run_dir" ..."
        mkdir $run_dir
	mkdir $run_dir/diags
	mkdir $run_dir/tapes
	mkdir $run_dir/profiles
fi       

####
## Link ALL of the files
####
cd $run_dir
echo "Grabbing necessary files ..."

cp $submit_script .

#--- 1. linking binary ---------
if [ "$use_ecco_binary_inputs" == "true" ] ; then
  echo "** Copying ECCO binaries, llc90 grid, and smoothing ..."
  ln -s ${input_data_dir}/input_binaries .
  ln -s ${input_data_dir}/GRID/tile*.mitgrid .
  ###
  ln -s ${input_data_dir}/input_smooth/smooth2Dscales001${extsmooth} ./smooth2Dscales001
  ln -s ${input_data_dir}/input_smooth/smooth3DscalesH001${extsmooth} ./smooth3DscalesH001
  ln -s ${input_data_dir}/input_smooth/smooth3DscalesZ001 ./
  ln -s ${input_data_dir}/input_smooth/smooth2Dnorm001${extsmooth}.data ./smooth2Dnorm001.data
  ln -s ${input_data_dir}/input_smooth/smooth3Dnorm001${extsmooth}.data ./smooth3Dnorm001.data
  ln -s ${input_data_dir}/input_smooth/smooth2Dnorm001.meta ./
  ln -s ${input_data_dir}/input_smooth/smooth3Dnorm001.meta ./
fi
#=================================================================================

#--- 2. linking forcing dir ------
echo "** linking forcing dir"
ln -sf $forcing_dir ./
#=================================================================================

#--- 3.1 link ECCO mixing params ------
if [ "$use_ecco_mixing_params" == "true" ] ; then
  echo "** Grabbing ECCO mixing parameters ... "
  ln -s ${input_data_dir}/ADXXfiles${xxext}/xx_kapgm.00* ./
  ln -s ${input_data_dir}/ADXXfiles${xxext}/xx_kapredi.00* ./
  ln -s ${input_data_dir}/ADXXfiles${xxext}/xx_diffkr.00* ./
  ln -s ${input_data_dir}/input_weight .
fi
#--- 3.2 Link ECCO initial conditions ------
if [ "$use_ecco_initial_conditions" == "true" ] ; then
  echo "** Grabbing ECCO initial conditions ... "
  ln -s ${input_data_dir}/ADXXfiles${xxext}/xx_etan.00* ./
  ln -s ${input_data_dir}/ADXXfiles${xxext}/xx_theta.00* ./
  ln -s ${input_data_dir}/ADXXfiles${xxext}/xx_salt.00* ./
  ln -s ${input_data_dir}/ADXXfiles${xxext}/xx_uvel.00* ./
  ln -s ${input_data_dir}/ADXXfiles${xxext}/xx_vvel.00* ./
  if [ ! -d "./input_weight" ] ; then
    ln -s ${input_data_dir}/input_weight .
  fi
fi

#--- 3.3 ECCO insitu obs ------
if [ "$use_ecco_insitu_obs" == "true" ] ; then
  echo "** Grabbing ECCO insitu observations ... " 
  ln -s ${input_data_dir}/input_insitu/*.nc .
fi

#--- 3.4 ECCO Pickups ------
if [ "$use_ecco_pickups" == "true" ] ; then
  echo "** Grabbing ECCO Pickups ... " 
  cp $ecco_pickup_dir/pickup* .
elif [ "$use_diff_pickups" == "true" ] ; then 
  if [ -d $extra_pickup_dir ] ; then
    echo "** Grabbing other pickups ..."
    cp $extra_pickup_dir/pickup*$pickup_iter* .
  else
    echo "** Could not find pickup dir: $extra_pickup_dir ... "
  fi
else
  echo "** No pickups selected ... "
fi

##=================================================================================

#--- 4. NAMELISTS ---------
ln -sf ${input_dir}/* ./
#=================================================================================

#--- 5. executable --------
if [ "$suff" == "_ad" ] ; then 
	ln -sf ${build_dir_ad}/mitgcmuv${suff} ./
elif [ "$suff" == "" ] ; then
	ln -sf ${build_dir}/mitgcmuv${suff} ./
else
	echo "ERROR: No executable found, unrecognized suffix ... " 
fi
#=================================================================================

#--- 7. Copy additional control vectors for this experiment, if dir exists
if [ "$use_extra_ctrls" == "true" ] ; then
  if [ -d $ctrl_dir ] ; then 
    echo "** Grabbing sensitivity ctrls ..."
    for ff in $ctrl_dir/xx_*
    do
        newfile=${ff/$ctrl_dir\//}
        newfile=${newfile/12/59}
        ln -sf $ff ./$newfile
    done
    ln -sf $ctrl_dir/wt_ones* ./
  else
    echo "** No additional control vectors ... "
  fi
else 
  echo "** Extra controls not added ... "
fi
#=================================================================================

#--- 8. Look for perturbation directory
if [ "$use_perturbation" == "true" ] ; then
  if [ -d $perturb_dir ] ; then
    echo "** Grabbing perturbation ... "
    ln -sf $perturb_dir/* .
  else
    echo "** Could not find perturbation directory: $perturb_dir ... "
  fi
else 
  echo "** Perturbations not added ... " 
fi
#=================================================================================

#--- 9. Copy masks for this particular setup.
#  dir should be inside inputs
if [ "$use_masks" == "true" ] ; then
  if [ -d $masks_dir ] ; then
    echo "** Grabbing masks ... "
    ln -s $masks_dir/* .
  else
    echo "** No masks found in $masks_dir ... "
  fi
else
  echo "** Masks not used ... "
fi
#=================================================================================

echo "Ready to execute ..."

echo ""
echo "*** Pro tips: "
echo "      - Check data.pkg: useAUTODIFF = .true.? usePROFILES = .false.? "
echo ""
echo "      - Check data: "
echo "           nTimeSteps correct? tapes directory uncommented? adjDump = false?"
echo ""
echo "      - Check data.ctrl ... mult = 0 for non-optimize run? "
echo "           have the necessary xx_<parameter> files?"
echo ""
echo "      - Check data.diagnostics: have the filenames set with diags/ prefix? "
echo ""
echo "      - Check data.exf: directory set for correct forcing files? period correct?"
echo "" 
echo "      - Check data.ecco: ... just make sure it looks good"
echo ""
echo "      - Check to make sure any masks are set properly ... "
echo ""
echo "      - Check submit file for .."
echo "           Correct queue? "
echo "           forward run: <exec> mitgcmuv "
echo "           adjoint: <exec> mitgcmuv_ad "
echo "           walltime correct? " 
echo "		 DIFFERENT FOR SCRATCH: change workrun directory in submit file "
echo ""
echo "Assuming this is done, ready for launch ... "
echo ""
echo ""
